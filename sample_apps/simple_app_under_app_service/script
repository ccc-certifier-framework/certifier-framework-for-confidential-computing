#
# Helpful script to run example
#

# Set some shortcuts
#export GOROOT=/usr/local/go
#export PATH=$PATH:$GOROOT/bin
#export GO111MODULE=off
export GOPATH=$HOME
export CERTIFIER_PROTOTYPE=~/src/github.com/jlmucb/crypto/v2/certifier-framework-for-confidential-computing
export SERVICE_EXAMPLE_DIR=$CERTIFIER_PROTOTYPE/sample_apps/simple_app_under_app_service
export APP_SERVICE_DIR=$CERTIFIER_PROTOTYPE/application_service
export UTILITIES=$CERTIFIER_PROTOTYPE/utilities

# Create keys (do this once, if you've done it in application service, copy them into provisioning)
mkdir -p $SERVICE_EXAMPLE_DIR/provisioning
cd $SERVICE_EXAMPLE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/cert_utility.exe --operation=generate-policy-key-and-test-keys \
    --policy_key_output_file=policy_key_file.bin --policy_cert_output_file=policy_cert_file.bin \
    --platform_key_output_file=platform_key_file.bin --attest_key_output_file=attest_key_file.bin

# embed policy key in the app
cd $SERVICE_EXAMPLE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/embed_policy_key.exe --input=policy_cert_file.bin --output=../policy_key.cc

# make the app
cd $SERVICE_EXAMPLE_DIR
make -f service_example_app.mak

# make app data directories (do this once)
cd $SERVICE_EXAMPLE_DIR
mkdir -p app1_data app2_data
mkdir -p service

# build policy
cd $SERVICE_EXAMPLE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject=policy_key_file.bin \
  --verb="is-trusted-for-attestation" --output=ts1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
  --verb="says" --clause=ts1.bin --output=vse_policy1.bin

$CERTIFIER_PROTOTYPE/utilities/measurement_utility.exe --type=hash --input=../service_example_app.exe \
      --output=service_example_app.measurement

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject="" \
  --measurement_subject=service_example_app.measurement --verb="is-trusted" \
  --output=ts2.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
  --verb="says" --clause=ts2.bin --output=vse_policy2.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
  --vse_file=vse_policy1.bin --duration=9000 \
  --private_key_file=policy_key_file.bin --output=signed_claim_1.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy2.bin \
  --duration=9000 --private_key_file=policy_key_file.bin --output=signed_claim_2.bin

$CERTIFIER_PROTOTYPE/utilities/package_claims.exe --input=signed_claim_1.bin,signed_claim_2.bin\
  --output=policy.bin

$CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=policy.bin

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject=attest_key_file.bin \
  --verb="is-trusted-for-attestation" --output=tsc1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
  --verb="says" --clause=tsc1.bin --output=vse_policy3.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy3.bin \
  --duration=9000 --private_key_file=policy_key_file.bin \
  --output=platform_attest_endorsement.bin

$CERTIFIER_PROTOTYPE/utilities/print_signed_claim.exe --input=platform_attest_endorsement.bin

cd $SERVICE_EXAMPLE_DIR/provisioning
cp -p ./* $SERVICE_EXAMPLE_DIR/service
cp -p ./* $SERVICE_EXAMPLE_DIR/app1_data
cp -p ./* $SERVICE_EXAMPLE_DIR/app2_data

# compile the server (do this once)
cd $CERTIFIER_PROTOTYPE/certifier_service
go build simpleserver.go

# -----------------------------------------------------------------------------
# Build and provision the Application Service
# -----------------------------------------------------------------------------
cd $APP_SERVICE_DIR

make -f app_service.mak

cd $APP_SERVICE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject=platform_key_file.bin \
    --verb="is-trusted-for-attestation" --output=ts1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
    --verb="says" --clause=ts1.bin --output=vse_policy1.bin

$CERTIFIER_PROTOTYPE/utilities/measurement_utility.exe --type=hash --input=../app_service.exe \
      --output=app_service.measurement

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject="" \
    --measurement_subject=app_service.measurement --verb="is-trusted" \
    --output=ts2.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
    --verb="says" --clause=ts2.bin --output=vse_policy2.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
    --vse_file=vse_policy1.bin --duration=9000 \
    --private_key_file=policy_key_file.bin --output=signed_claim_1.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy2.bin \
    --duration=9000 --private_key_file=policy_key_file.bin --output=signed_claim_2.bin

$CERTIFIER_PROTOTYPE/utilities/package_claims.exe --input=signed_claim_1.bin,signed_claim_2.bin\
    --output=policy.bin

$CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=policy.bin

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject=attest_key_file.bin \
    --verb="is-trusted-for-attestation" --output=tsc1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=platform_key_file.bin \
    --verb="says" --clause=tsc1.bin --output=vse_policy3.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy3.bin \
    --duration=9000 --private_key_file=platform_key_file.bin \
    --output=platform_attest_endorsement.bin

$CERTIFIER_PROTOTYPE/utilities/print_signed_claim.exe --input=platform_attest_endorsement.bin

cp -p policy_key_file.bin policy_cert_file.bin policy.bin attest_key_file.bin platform_attest_endorsement.bin platform_key_file.bin app_service.measurement $APP_SERVICE_DIR/service

cd service

$CERTIFIER_PROTOTYPE/certifier_service/simpleserver \
  --policyFile=policy.bin --readPolicy=true

cd $APP_SERVICE_DIR

$APP_SERVICE_DIR/app_service.exe \
  --policy_cert_file="policy_cert_file.bin" \
  --service_dir="./service/" \
  --service_policy_store="policy_store" \
  --host_enclave_type="simulated-enclave" \
  --platform_file_name="platform_file.bin" \
  --platform_attest_endorsement="platform_attest_endorsement.bin" \
  --attest_key_file="attest_key_file.bin" \
  --measurement_file="app_service.measurement" \
  --cold_init_service=false
#  --cold_init_service=true

# Run the apps
cd $SERVICE_EXAMPLE_DIR

arg1_str="--print_all=true,--operation=cold-init,--data_dir="$SERVICE_EXAMPLE_DIR"/app1_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg1_str\"

arg2_str="--print_all=true,--operation=get-certifier,--data_dir="$SERVICE_EXAMPLE_DIR"/app1_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg2_str\"

arg3_str="--print_all=true,--operation=cold-init,--data_dir="$SERVICE_EXAMPLE_DIR"/app2_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg3_str\"

arg4_str="--print_all=true,--operation=get-certifier,--data_dir="$SERVICE_EXAMPLE_DIR"/app2_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg4_str\"

# In app as a server terminal run the following:
arg5_str="--print_all=true,--operation=run-app-as-server,--data_dir="$SERVICE_EXAMPLE_DIR"/app2_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg5_str\"

# In app as a client terminal run the following:
arg6_str="--print_all=true,--operation=run-app-as-client,--data_dir="$SERVICE_EXAMPLE_DIR"/app1_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg6_str\"


arg7_str="--print_all=true,--operation=warm-restart,--data_dir="$SERVICE_EXAMPLE_DIR"/app1_data/,--measurement_file=service_example_app.measurement,--policy_store_file=policy_store"

$SERVICE_EXAMPLE_DIR/start_program.exe --executable=$SERVICE_EXAMPLE_DIR/service_example_app.exe \
    --args=\"$arg7_str\"

