Instructions for building and running the sample application and generating policy for
                 the Certifier Service using the policy utilities.
======================================================================================


This uses the same application as in .../sample_app but under sev.
This example embeds the policy key in the application using embed_policy_key.exe.

$CERTIFIER_PROTOTYPE is the top level directory for the certifier repository.  On my
computer, it is in ~/src/github.com/jlmucb/crypto/v2/certifier-framework-for-confidential-computing.
It is helpful to have a shell variable for it:

export CERTIFIER_PROTOTYPE=~/src/github.com/jlmucb/crypto/v2/certifier-framework-for-confidential-computing

$SEV_EXAMPLE_DIR is this directory containing the example application.  Again, a shell variable
is useful.

export SEV_EXAMPLE_DIR=$CERTIFIER_PROTOTYPE/sample_apps/simple_app_under_sev

-------------------------------------------------------------------------

General notes on building and running an SEV enabled VM under KVM

As it stand today (Oct. 2022), you will need to prepare the following
components to have SEV-SNP VMs under KVM:

  - Server BIOS/Firmware update to support SEV-SNP
  - AMD SEV firmware update if necessary
  - Linux kernel build with SNP support (for both the host and the guest)
  - Build the SNP enabled virtual firmware for the guest OS (OVMF)
  - Build the SNP enabled QEMU
  - Build guest and host SEV tools
  - A prepared guest disk image if desired

You first need to make sure your EPYC 7xx3 (or newer) server BIOS is updated to
the newest version with SNP support. This heavily depends on your server
vendor. But they should all provide tools for the job.

Once you have the newest BIOS/Firmware, you should see some processor settings
in the BIOS similar to:

  - SEV-ES ASID space limit
  - SEV SNP memory coverage

Set the ES limit and enable SNP memory coverage or reservation. The terms would
be different for different servers. The way to know whether you have enabled
the hardware properly is to boot the host with a Linux kernel with SNP support
and do the following:

  vmware@sev-snp1:~$ dmesg | grep -i SEV
  [    3.291523] SEV-SNP: RMP table physical address 0x0000017e7fa00000 - 0x0000017fffafffff
  [    6.513026] systemd[1]: Set hostname to <sev-snp1>.
  [    7.002618] ccp 0000:2a:00.1: sev enabled
  [   70.954551] ccp 0000:2a:00.1: SEV API:1.52 build:4
  [   70.954564] ccp 0000:2a:00.1: SEV-SNP API:1.52 build:4
  [   70.977781] SEV supported: 478 ASIDs
  [   70.977782] SEV-ES and SEV-SNP supported: 31 ASIDs

You need to make sure you have RMP table reserved and SEV-SNP supported in the
log. Otherwise, you missed something in the platform configuration.

You might also need to update the SEV firmware. You should do this if you know
the firmware version is too low. Follow the instructions at:
https://github.com/AMDESE/AMDSEV/tree/sev-snp-devel#upgrade-sev-firmware

AMD helps with all the software and tools building steps with some scripts.
Make sure you clone it from: https://github.com/AMDESE/AMDSEV.git

Make sure you swtich to the "sev-snp-devel" branch. Follow the instructions in
the README and you are supposed to have everything ready. However, we encounted
several issues during the process. Hopefully these will be fixed by the time of
your attempt. Eventually, AMD will upstream all these SEV-SNP support to
Linux/QEMU/OVMF, etc. so that none of the building from the sources steps are
necessary.

Most of the errors you will encounter are related to environment setup. When
the error log is clear, nothing can't be solved with a couple of Google
searches. However, due to how OVMF is built, you might encounter errors with
misleading messages. If you do encounter problems building OVMF with SNP
support, first make sure you have both IASL and NASM installed on your build
system. When the error occurs and you are at a lost, you should at least be
able to see the command failed. You can manually retry the command after
setting the EDK environment manually. For instance:

  cd AMDSEV/ovmf
  . ./edksetup.sh
  nice build -v --cmd-len=64436 -DDEBUG_ON_SERIAL_PORT=TRUE -n 256 -t GCC5 -a X64 -p OvmfPkg/OvmfPkgX64.dsc

This should give you more helpful info. If you encounter any errors with NASM
complaining about new x86 instructions, remember to build and install the
newest version of NASM. The one comes with your distro might be too old.

If you have problem building the kernel and generate the ramdisk following the
AMD script or if you need special kernel configurations, you can always build
your own.

Clone the AMD Linux kernel source at: https://github.com/AMDESE/linux.git
Switch to the newest SNP branch. Currently, sev-snp-5.19-rc5 would do.

Copy your host config to the source:

  cp /boot/config-`uname -r` .config

Sift through the configuration differences and double check the SEV related ones:

  make oldconfig
  make menuconfig

Compile the kernel and generate the deb packages:

  make -j `getconf _NPROCESSORS_ONLN`
  make -j deb-pkg LOCALVERSION=-custom

Whatever problems you encounter here should be straight-forward enough to fix.
You should have the following packages ready for install with dpkg after
everything is done:

  linux-headers-5.19.0-rc5-next-20220706-custom_5.19.0-rc5-next-20220706-custom-4_amd64.deb
  linux-image-5.19.0-rc5-next-20220706-custom_5.19.0-rc5-next-20220706-custom-4_amd64.deb
  linux-image-5.19.0-rc5-next-20220706-custom-dbg_5.19.0-rc5-next-20220706-custom-4_amd64.deb
  linux-libc-dev_5.19.0-rc5-next-20220706-custom-4_amd64.deb

Their identities should be self-explanatory. If you need to update the ramdisk,
you can do it after installing the linux-image-xxx package.

After the installation is done, create /etc/modprobe.d/kvm.conf and add the
following line to it:

  options kvm_amd sev-snp=1 sev=1 sev-es=1

Reboot your host Linux and verify SNP is ready. Try the dmesg above first and
do the following. Make sure you see the 'Y'.

  # cat /sys/module/kvm_amd/parameters/sev_snp
  Y

You should also be able to see the SEV device on the host at /dev/sev. Now you
should have host, kernel, QEMU, and OVMF ready. The last thing to do on the
host is to install sev-tool and retrieve the platform certificates. Clone the
sev-tool source at: https://github.com/AMDESE/sev-tool.git

Follow the instructions and build the tool. Usage is also included in the
README. However, if for some reason you encountered some buffer overflow during
the certificate retrieval, try the following:

  --- a/src/sevcore_linux.cpp
  +++ b/src/sevcore_linux.cpp
  @@ -680,7 +680,7 @@ int SEVDevice::generate_vcek_ask(const std::string output_folder,
       int cmd_ret = SEV_RET_UNSUPPORTED;
       int ioctl_ret = -1;
       sev_user_data_get_id id_buf;
  -    char cmd[235];
  +    char cmd[512];
       std::string fmt;
       std::string output = "";
       std::string der_cert_w_path = output_folder + vcek_der_file;

Hopefully it will be fixed by the time of your attempt.

The next step is to create a guest. You do this by following the general
KVM/QEMU tutorial. After the guest is installed, install the guest linux
kernel/header/libc packages in the guest. Locate your disk image at
/var/lib/libvirt/images. And it is time to launch your guest. Go to your AMDSEV
repo and do the following:

  ./launch-qemu.sh -hda /var/lib/libvirt/images/your_disk_image.qcow2 -sev-snp

To get networking and VNC, I recommend updating the script to fix the options.
But I assume you know what you are doing. Here is just a reference:

  add_opts "-netdev user,id=vmnic,hostfwd=tcp::8000-:22 -device e1000,netdev=vmnic,romfile="
  add_opts "-monitor pty -monitor unix:monitor,server,nowait -vnc :0"

If you encountered problems with accessing /dev/sev, make sure your SeLinux or
AppArmor is configured with proper permissions or just disable them. You should
be able to check these potential permission problems in dmesg.

If the guest boots successfully, you should be able to see the /dev/sev-guest
device and the corresponding SEV related messages in the guest OS kernel log:

  $ dmesg | grep -i SEV
  [    0.185529] Memory Encryption Features active: AMD SEV SEV-ES SEV-SNP
  [    0.324674] SEV: Using SNP CPUID table, 31 entries present.
  [    0.512198] SEV: SNP guest platform device initialized.
  [    0.670153] sev-guest sev-guest: Initialized SEV guest driver (using vmpck_id 0)
  [    1.373997] systemd[1]: Set hostname to <sev-snp-vm>.

-------------------------------------------------------------------------

Measuring an SEV kernel and initram

The easiest way to measure your SNP VM is using the open source
SEV-SNP-MEASUREMENT tool from IBM. You can clone the project from here:
https://github.com/IBM/sev-snp-measure.git

$ sev-snp-measure --help
usage: sev-snp-measure [-h] [--version] [-v] --mode {sev,seves,snp} [--vcpus N]
                       [--vcpu-type CPUTYPE] [--vcpu-sig VALUE] [--vcpu-family FAMILY]
                       [--vcpu-model MODEL] [--vcpu-stepping STEPPING] --ovmf PATH [--kernel PATH]
                       [--initrd PATH] [--append CMDLINE] [--output-format {hex,base64}]

You should use 'snp' for the mode option. N is the number of vcpus you
allocated for your SNP VM. You can also check it inside the VM. Instead of
using vcpu-sig/vcpu-family/vcpu-model/vcpu-stepping combinations, you can use
vcpu-type for the input. This is the vcpu type you specified when you start
your VM. You can check /proc/cpuinfo inside the guest too.

The --ovmf option is used to provide the OVMF firmware image of your VM if you
are booting with OVMF. Otherwise, you can use --kernel/--initrd/--append to
specify kernel image, initrd image, and kernel boot parameters. You can get
your guest boot parameters by reading /proc/cmdline.

If you used the launch-qemu.sh script from AMD, you are booting the VM using
OVMF. The kernel and initrd are all on the disk image. In this case, you can
get the measurement of your VM by issuing the following:

  $ ./sev-snp-measure.py --mode snp --vcpus=4 --vcpu-type=EPYC-v4 --ovmf=usr/local/share/qemu/OVMF_CODE.fd

The output will match the measurement field in the attestation report from your
SEV-SNP firmware.

-------------------------------------------------------------------------

Additional comments

When deploying an SEV application, the application and all the libraries it
needs should be provisioned into initram.  If you are using the application
service under SEV, the application service and all the libraries it
needs should be provisioned into initram.

-------------------------------------------------------------------------

Instructions for running example

Step 1: Build the utilities
    cd $CERTIFIER_PROTOTYPE
    cd utilities
    make -f cert_utility.mak
    make -f policy_utilities.mak


Step 2:  Create a directory for the provisioning files
    mkdir $SEV_EXAMPLE_DIR/provisioning


Step 3: Generate the policy key and self-signed cert
    cd $SEV_EXAMPLE_DIR/provisioning
    $CERTIFIER_PROTOTYPE/utilities/cert_utility.exe --operation=generate-policy-key \
    --policy_key_output_file=policy_key_file.bin --policy_cert_output_file=policy_cert_file.bin 

Step3a: Make sure there are der encoded versions of the ARK, ASK and VCEK certificates in
    the provisioning directory.  For Sev, these certs come from the platform.  The script
    provides an alternate way to compile the application in a simulated evironment provided
    by sev-snp-simulator.  For that environment, compilation script include -D SEV_DUMMY_GUEST.
    To test agains this environment, you must generate a ARK, ASK and VCEK certificates
    that are compatible with the sev-snp-simulator keys.  To do this:
        cd $SEV_EXAMPLE_DIR/provisioning
        $CERTIFIER_PROTOTYPE/utilities/simulated_sev_key_generation.exe --ark_der=sev_ark_cert.der \
        --ask_der=sev_ask_cert.der --vcek_der=sev_vcek_cert.der \
        --vcek_key_file=/etc/certifier-snp-sim/ec-secp384r1-pub-key.pem
        mv ark_cert.der ark_cert.der.old
        mv ask_cert.der ask_cert.der.old
        mv vcek_cert.der vcek_cert.der.old
        mv sev_ark_cert.der ark_cert.der
        mv sev_ask_cert.der ask_cert.der
        mv sev_vcek_cert.der vcek_cert.der
    You must run the applications below as root for the simulated enclave.  Make sure the keys come
    from $CERTIFIER_PROTOTYPE/src/ec-secp384r1-pub-key.pem and not the simulator.


Step 4: Embed the policy key in sev_example_app.
    cd $SEV_EXAMPLE_DIR/provisioning
    $CERTIFIER_PROTOTYPE/utilities/embed_policy_key.exe --input=policy_cert_file.bin --output=../policy_key.cc


Step 5: Compile sev_example_app with the embedded policy_key
    cd $SEV_EXAMPLE_DIR
    make -f sev_example_app.mak


Step 6: Author the policy for the security domain and produce the signed claims the apps need.
    cd $SEV_EXAMPLE_DIR/provisioning

    The policies can be generated either manually or through the policy generator tool.

Step 6.a: Manual policy generation

    a. Obtain the measurement of the trusted application for ths security domain.

      cd $SEV_EXAMPLE_DIR/provisioning
      $CERTIFIER_PROTOTYPE/utilities/measurement_utility.exe --mrenclave=<HASH> \
        --output=sev_example_app.measurement

      Replace <HASH> with your actual measurement from sev-snp-measure. Or use:
      010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708
      if you are using the sev-snp-simulator.

    b. Construct platform key policy

      $CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --cert-subject=ark_cert.der \
        --verb="is-trusted-for-attestation" --output=ts1.bin
      $CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
        --verb="says" --clause=ts1.bin --output=vse_policy1.bin
      $CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
        --vse_file=vse_policy1.bin --duration=9000 \
        --private_key_file=policy_key_file.bin --output=signed_claim_1.bin

    c. Construct the measurement policy
      $CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject="" \
        --measurement_subject=sev_example_app.measurement --verb="is-trusted" \
        --output=ts2.bin
      $CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
        --verb="says" --clause=ts2.bin --output=vse_policy2.bin
      $CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy2.bin \
        --duration=9000 --private_key_file=policy_key_file.bin --output=signed_claim_2.bin

    d. Construct the trusted platform policy

      $CERTIFIER_PROTOTYPE/utilities/make_property.exe --property_name=debug --property_type='string' comparator="=" \
      --string_value=no --output=property1.bin
      $CERTIFIER_PROTOTYPE/utilities/make_property.exe --property_name=migrate --property_type='string' comparator="=" \
      --string_value=no --output=property2.bin
      $CERTIFIER_PROTOTYPE/utilities/make_property.exe --property_name=smt --property_type='string' comparator="=" \
      --string_value=no --output=property5.bin
      $CERTIFIER_PROTOTYPE/utilities/make_property.exe --property_name='api-major' --property_type=int --comparator=">=" \
      --int_value=0 --output=property3.bin
      $CERTIFIER_PROTOTYPE/utilities/make_property.exe --property_name='api-minor' --property_type=int --comparator=">=" \
      --int_value=0 --output=property4.bin
      $CERTIFIER_PROTOTYPE/utilities/make_property.exe --property_name='tcb-version' --property_type=int --comparator="=" \
      --int_value=0x03000000000008115 --output=property6.bin
      $CERTIFIER_PROTOTYPE/utilities/combine_properties.exe \
      --in=property1.bin,property2.bin,property3.bin,property4.bin,property5.bin,property6.bin \
      --output=properties.bin
      $CERTIFIER_PROTOTYPE/utilities/make_platform.exe --platform_type=amd-sev-snp \
      --properties_file=properties.bin --output=platform.bin
      $CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --platform_subject=platform.bin \
      --verb="has-trusted-platform-property" --output=ts3.bin
      $CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
      --verb="says" --clause=ts3.bin --output=vse_policy3.bin
      $CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy3.bin \
        --duration=9000 --private_key_file=policy_key_file.bin --output=signed_claim_3.bin

    e. Package the policy for the certifier
      $CERTIFIER_PROTOTYPE/utilities/package_claims.exe --input=signed_claim_1.bin,signed_claim_2.bin,signed_claim_3.bin\
        --output=policy.bin

    f. [optional] Print the policy
       $CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=policy.bin

Step 6.b: Policy Generator

    a. Edit policy file

      Open sev_policy.json and replace trusted measurements in the
      "measurements" property with the expected measurement. Use:
      010203040506070801020304050607080102030405060708010203040506070801020304050607080102030405060708
      if you are using the sev-snp-simulator.

    b. Run Policy Generator:

      $CERTIFIER_PROTOTYPE/utilities/policy_generator.exe --policy_input=../sev_policy.json \
        --schema_input=$CERTIFIER_PROTOTYPE/utilities/policy_schema.json --util_path=$CERTIFIER_PROTOTYPE/utilities

    c. [optional] Print the policy
       $CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=policy.bin

Step 7: Build SimpleServer:
  You should have gotten the protobuf compiler (protoc) for go when you got go.
  If not:
    go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  Compile the protobuf
    cd $CERTIFIER_PROTOTYPE
    cd certifier_service/certprotos
    protoc --go_opt=paths=source_relative --go_out=. --go_opt=M=certifier.proto ./certifier.proto
  Compile the oelib for OE host verification
    cd $CERTIFIER_PROTOTYPE
    cd certifier_service/oelib
    make
  If you do not have OE SDK installed or do not want to enable OE:
    make dummy

  This should produce a go file for the certifier protobufs called certifier.pb.go in certprotos.
  Now build  simpeserver:
    cd $CERTIFIER_PROTOTYPE/certifier_service
    go build simpleserver.go


Step 8: Create directories for app data
    cd $SEV_EXAMPLE_DIR
    mkdir app1_data app2_data


Step 9: Create a directory for service data
    mkdir $SEV_EXAMPLE_DIR/service


Step 10: Provision the app files
    Note: These files are required for the "simulated-enclave" which cannot measure the
    example app and needs a provisioned attestation key and platform cert.  On real
    hardware, these are not needed.

    cd $SEV_EXAMPLE_DIR/provisioning
    cp ./* $SEV_EXAMPLE_DIR/app1_data
    cp ./* $SEV_EXAMPLE_DIR/app2_data


Step 11: Provision the service files
    cd $SEV_EXAMPLE_DIR/provisioning
    cp policy_key_file.bin policy_cert_file.bin policy.bin $SEV_EXAMPLE_DIR/service


Step 12: Start the Certifier Service
  In a new terminal window:
    cd $SEV_EXAMPLE_DIR/service
    $CERTIFIER_PROTOTYPE/certifier_service/simpleserver \
      --policyFile=policy.bin --readPolicy=true


Step 13:  Run the apps and get admission certificates from Certifier Service
  Open two new terminals (one for the app as a client and one for the app as a server):

  In app as a client terminal run the following:
    cd $SEV_EXAMPLE_DIR
    $SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=cold-init --data_dir=./app1_data/ --policy_store_file=policy_store
    $SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=get-certifier --data_dir=./app1_data/ --policy_store_file=policy_store

  In app as a server terminal run the following:
    cd $SEV_EXAMPLE_DIR
    $SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=cold-init --data_dir=./app2_data/ --policy_store_file=policy_store 
    $SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=get-certifier --data_dir=./app2_data/ --policy_store_file=policy_store

At this point, both versions of the app have their admission certificates.  You can look at
the output of the terminal running simpleserver for output.  Now all we have to do is have
the apps connect to each other for the final test.  The Certifier Service is no longer needed
at this point.


Step 14:  Run the apps to test trusted services
-----------------------------------------------

  In app as a server terminal run the following:
    cd $SEV_EXAMPLE_DIR
    $SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true --operation=run-app-as-server --data_dir=./app2_data/ \
      --policy_store_file=policy_store

  In app as a client terminal run the following:
    cd $SEV_EXAMPLE_DIR
    $SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true --operation=run-app-as-client --data_dir=./app1_data/ \
      --policy_store_file=policy_store

You should see the message "Hi from your secret server" in the client terminal window and
"Hi from your secret client".   If so, your first Confidential Computing program worked!


-----------------------------------------------------------------------------------------



Further notes on attestation in Sev

Here is the sev attestation structure and supporting data structures:

union tcb_version {
  struct {
    uint8_t boot_loader;
    uint8_t tee;
    uint8_t reserved[4];
    uint8_t snp;
    uint8_t microcode;
  };
  uint64_t raw;
};

We decode the folllowing from the attestation report:

  single-socket:  bit 4 in the policy byte
  debug: bit 3 in policy byte
  migrate: bit 2 in policy byte
  smt: but 1 in policy mask
  abi-majori: byte 2 in 64 bit policy
  abi-minor: byte 1 in 64 bit policy
  tcb-version:  We currently record this as the 64 bit raw value.

If any of these properties is not specified in the "trused-platform-property", any value works.

Other values in the report that we may want to inspect, in the future are:

TSME: TSME enablement status on the platform. From PLATFORM_INFO in the report.
FAMILY_ID/IMAGE_ID: Provided at launch.
VMPL: The request VMPL for this report.
REPORT_ID/REPORT_ID_MA: Report ID of guest and migration agent.
CHIP_ID: If MaskChipId is set to 0, Identifier unique to the chip. This may be useful for revocation when a chip is
         reported as broken.
