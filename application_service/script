#
# Helpful script to run example
#
#export GOROOT=/usr/local/go
#export PATH=$PATH:$GOROOT/bin
#export GO111MODULE=off
export GOPATH=$HOME
export CERTIFIER_PROTOTYPE=~/src/github.com/jlmucb/crypto/v2/certifier-framework-for-confidential-computing
export APP_SERVICE_DIR=$CERTIFIER_PROTOTYPE/application_service

# make the utilities
cd $CERTIFIER_PROTOTYPE
cd utilities
make -f cert_utility.mak
make -f policy_utilities.mak
mkdir $APP_SERVICE_DIR/provisioning

# create key data
cd $APP_SERVICE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/cert_utility.exe --operation=generate-policy-key-and-test-keys \
    --policy_key_output_file=policy_key_file.bin --policy_cert_output_file=policy_cert_file.bin \
    --platform_key_output_file=platform_key_file.bin --attest_key_output_file=attest_key_file.bin

cd $APP_SERVICE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/embed_policy_key.exe --input=policy_cert_file.bin --output=../policy_key.cc

#make the service
cd $APP_SERVICE_DIR

make -f app_service.mak

# provision service data
cd $APP_SERVICE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject=platform_key_file.bin \
    --verb="is-trusted-for-attestation" --output=ts1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
    --verb="says" --clause=ts1.bin --output=vse_policy1.bin

$CERTIFIER_PROTOTYPE/utilities/measurement_utility.exe --type=hash --input=../app_service.exe \
      --output=app_service.measurement

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject="" \
    --measurement_subject=app_service.measurement --verb="is-trusted" \
    --output=ts2.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
    --verb="says" --clause=ts2.bin --output=vse_policy2.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
    --vse_file=vse_policy1.bin --duration=9000 \
    --private_key_file=policy_key_file.bin --output=signed_claim_1.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy2.bin \
    --duration=9000 --private_key_file=policy_key_file.bin --output=signed_claim_2.bin

$CERTIFIER_PROTOTYPE/utilities/package_claims.exe --input=signed_claim_1.bin,signed_claim_2.bin\
    --output=policy.bin

$CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=policy.bin

// just and example
$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject=attest_key_file.bin \
    --verb="is-trusted-for-attestation" --output=tsc1.bin

$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=platform_key_file.bin \
    --verb="says" --clause=tsc1.bin --output=vse_policy3.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy3.bin \
    --duration=9000 --private_key_file=platform_key_file.bin \
    --output=platform_attest_endorsement.bin

$CERTIFIER_PROTOTYPE/utilities/print_signed_claim.exe --input=platform_attest_endorsement.bin

cp -p policy_key_file.bin policy_cert_file.bin policy.bin attest_key_file.bin platform_attest_endorsement.bin platform_key_file.bin app_service.measurement $APP_SERVICE_DIR/service

# run certifier_service
cd $APP_SERVICE_DIR/service
$CERTIFIER_PROTOTYPE/certifier_service/simpleserver \
  --policyFile=policy.bin --readPolicy=true

# run app service
cd $APP_SERVICE_DIR

$APP_SERVICE_DIR/app_service.exe \
  --policy_cert_file="policy_cert_file.bin" \
  --service_dir="./service/" \
  --service_policy_store="policy_store" \
  --host_enclave_type="simulated-enclave" \
  --platform_file_name="platform_file.bin" \
  --platform_attest_endorsement="platform_attest_endorsement.bin" \
  --attest_key_file="attest_key_file.bin" \
  --measurement_file="app_service.measurement" \
  --cold_init_service=true
  --cold_init_service=false

# send request to start app
$APP_SERVICE_DIR/send_request.exe
$APP_SERVICE_DIR/send_request.exe --executable="./test_user.exe"
